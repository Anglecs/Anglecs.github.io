<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>盒盒のbox</title>
  
  <subtitle>没有奇迹，没有惊喜</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-07T03:16:54.564Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>盒盒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python爬虫（二）</title>
    <link href="http://example.com/2023/07/06/python%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2023/07/06/python%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2023-07-05T16:00:00.000Z</published>
    <updated>2023-07-07T03:16:54.564Z</updated>
    
    <content type="html"><![CDATA[<p><del>还是看到什么写什么</del> </p><h1 id="1、format-方法的基本使用"><a href="#1、format-方法的基本使用" class="headerlink" title="1、format()方法的基本使用"></a>1、format()方法的基本使用</h1><p>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</p><p>感觉这么说有点干，不如举个具体的栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;&#123;&#125;顶针，鉴定为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;一眼&quot;</span>,<span class="string">&quot;纯纯的弱鸡&quot;</span>)</span><br></pre></td></tr></table></figure><p>很明显可以看出来<code>format</code>按照顺序将<code>&quot;顶针&quot;</code>和<code>&quot;纯纯的弱鸡&quot;</code>填到了前面的两个{}内，这样做的好处有什么呢</p><p>好处就是如果有隋唐测试，要求更改语句，我们不用去重新输入整条语句，只用改变format中的参数，就能创造一个顶针世界（bushi</p><p>format中也有参数的序号，同样以上面那个句子为例,我如果稍作改动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;&#123;0&#125;顶针，鉴定为&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;一眼&quot;</span>,<span class="string">&quot;纯纯的弱鸡&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样的输出结果跟之前的是一样的，但如果再把0和1交换位置，变成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;&#123;1&#125;顶针，鉴定为&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;一眼&quot;</span>,<span class="string">&quot;纯纯的弱鸡&quot;</span>)</span><br></pre></td></tr></table></figure><p>这种情况下输出的语句就会有很大变化</p><p><strong>warning：必须满足空格数对应参数数量时，才可以不加参数序号使用</strong></p><p>format()另外的用处之——格式控制</p><p>{&lt;参数序号&gt;:&lt;格式控制标记&gt;}</p><table><thead><tr><th>填充</th><th>对齐</th><th>宽度</th><th>,</th><th>.精度</th><th>类别</th></tr></thead><tbody><tr><td>用于填充单个字符</td><td>&lt;左对齐；&gt;右对齐；^居中</td><td>设定输出宽度</td><td>数字的千位分隔符，适用于整数和浮点数</td><td>浮点数小数部分的精度或字符串最大输出长度</td><td>整数类型B,c,d,o,x,X浮点数类型e,E,f,%</td></tr></tbody></table><p>可以随意选择这六个里面的一个或多个使用，注意在使用的时候<strong>按照表格所示顺序排列</strong></p><p><a href="https://zhuanlan.zhihu.com/p/60357679">详细解释</a></p><h1 id="2、WebDriver"><a href="#2、WebDriver" class="headerlink" title="2、WebDriver"></a>2、WebDriver</h1><p>一个提供了各种语言环境的API来支持更多控制权和编写符合标准软件开发实践的应用程序，官方文档：<a href="https://www.selenium.dev/zh-cn/documentation/overview/">概述 | Selenium</a></p><p><del>感觉像是前端的东西，不确定再看看</del></p><p>尝试着写了一个万宝楼抢东西的脚本，但是卡在了登录验证和购买验证这里，打算再试试淘宝抢相机</p><h1 id="3、global全局变量"><a href="#3、global全局变量" class="headerlink" title="3、global全局变量"></a>3、global全局变量</h1><p><a href="https://zhuanlan.zhihu.com/p/96851082">Python 关键字global全局变量详解 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;del&gt;还是看到什么写什么&lt;/del&gt; &lt;/p&gt;
&lt;h1 id=&quot;1、format-方法的基本使用&quot;&gt;&lt;a href=&quot;#1、format-方法的基本使用&quot; class=&quot;headerlink&quot; title=&quot;1、format()方法的基本使用&quot;&gt;&lt;/a&gt;1、format</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫（一）</title>
    <link href="http://example.com/2023/07/05/python%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2023/07/05/python%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2023-07-04T16:00:00.000Z</published>
    <updated>2023-07-05T08:31:58.013Z</updated>
    
    <content type="html"><![CDATA[<p> <del>看到什么写什么</del></p><h1 id="1、for-index-value-in-enumerate-host-tr"><a href="#1、for-index-value-in-enumerate-host-tr" class="headerlink" title="1、for index,value in enumerate(host_tr):"></a>1、<code>for index,value in enumerate(host_tr):</code></h1><p>enumerate函数用于将一个可遍历的数据对象组合为一个索引序列，同时列出数据和数据下标，一般都用在for循环中</p><p>在这个例子中，enumerate(host_tr)之后的结果是((0,host_tr[0]),(1,host_tr[1]),(2,host_tr[2]),,,,,,,,)，所以有index和value的循环</p><h1 id="2、if-name-39-main-39"><a href="#2、if-name-39-main-39" class="headerlink" title="2、if __name__ == &#39;__main__&#39;:"></a>2、<code>if __name__ == &#39;__main__&#39;:</code></h1><p>每次开启一个程序，都必须写一个主函数作为程序的入口，也就是我们常说的main函数</p><p>与Java、C、C++等几种语言不同的是，<strong>Python是一种解释型脚本语言</strong>，在执行之前不同要将所有代码先编译成中间代码，Python程序运行时是从模块顶行开始，逐行进行翻译执行，所以，最顶层（没有被缩进）的代码都会被执行，所以Python中并不需要一个统一的main()作为程序的入口。在某种意义上讲，“if <strong>name</strong>&#x3D;&#x3D;’<strong>main</strong>:”也像是一个标志，象征着Java等语言中的程序主入口，告诉其他程序员，代码入口在此——这是<code>if __name__==__main__:</code>这条代码的意义之一。</p><p><code>__name__</code>属性是python的一个内置属性，记录了一个字符串</p><ul><li><p>若是在当前文件，则<code>__name__=&#39;__main__&#39;</code></p></li><li><p>若是导入的文件，<code>__name__</code>是模块名</p></li></ul><p>一般来说开发人员会在模块的最后带有测试代码，为了不在导入模块之后测试代码被执行，就可以在测试代码前加上一条<code>if __name__ == &#39;__main__&#39;</code></p><p><a href="https://zhuanlan.zhihu.com/p/340997807">详细解释</a></p><h1 id="3、代码（未完成）"><a href="#3、代码（未完成）" class="headerlink" title="3、代码（未完成）"></a>3、代码（未完成）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetInformationFromIpshu</span>(<span class="params">ip: <span class="built_in">str</span></span>) -&gt;<span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> requests.get(</span><br><span class="line">            <span class="string">&#x27;https://zh-hans.ipshu.com/ipv4/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(ip),</span><br><span class="line">            headers=&#123;</span><br><span class="line">            <span class="comment">#     根据要爬的网站去按f12看具体的请求头</span></span><br><span class="line">                 <span class="string">&#x27;accept-encoding&#x27;</span>: <span class="string">&#x27;gzip,deflate&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;cookie&#x27;:&#x27;*******&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;accept-language&#x27;:&#x27;******&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;sec-ch-ua&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;sec-ch-ua-mobile&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;sec-ch-ua-platform&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;sec-fetch-dest&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;sec-fetch-mode&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;sec-fetch-site&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;sec-fetch-user&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;upgrade-insecure-requests&#x27;</span></span><br><span class="line">            <span class="comment">#     &#x27;user-agent&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        sys.exit(</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">ip: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    r = GetInformationFromIpshu(ip)</span><br><span class="line">    maps = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        tree = html.fromstring(r.content)</span><br><span class="line">        host_tr = tree.xpath(<span class="string">&#x27;//table//td&#x27;</span>)</span><br><span class="line">        k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        v = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> host_tr:</span><br><span class="line">            <span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(host_tr):</span><br><span class="line">                <span class="keyword">if</span> value.tag == <span class="string">&#x27;td&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(value)</span><br><span class="line">                    <span class="keyword">if</span> value.xpath(<span class="string">&#x27;/a&#x27;</span>):</span><br><span class="line">                        k = <span class="built_in">str</span>(value.xpath(<span class="string">&#x27;/a/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">                        <span class="built_in">print</span>(k)</span><br><span class="line">                    <span class="keyword">elif</span> k != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> v != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                        maps[k] = v</span><br><span class="line">                        v = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    k = <span class="built_in">str</span>(value.xpath(<span class="string">&#x27;text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">                    <span class="built_in">print</span>(k)</span><br><span class="line">                <span class="keyword">else</span>:v += value.text.strip()</span><br><span class="line">                <span class="keyword">if</span> value.tail.strip() != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    v += <span class="string">&#x27; &#x27;</span> + value.tail.strip() + <span class="string">&#x27; &#x27;</span></span><br><span class="line">                    <span class="built_in">print</span>(v)</span><br><span class="line">                <span class="keyword">if</span> index == <span class="built_in">len</span>(host_tr) - <span class="number">1</span>:</span><br><span class="line">                    maps[k] = v</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_info(<span class="string">&#x27;13.227.62.117&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、json文件"><a href="#4、json文件" class="headerlink" title="4、json文件"></a>4、json文件</h1><p>JavaScript 对象表示法（JSON）是用于将结构化数据表示为 JavaScript 对象的标准格式，通常用于在网站上表示和传输数据（例如从服务器向客户端发送一些数据，因此可以将其显示在网页上）</p><hr><p>Q1：在爬虫写请求头的时候，是在哪个网页按f12，如果是在请求页，在请求有变的时候会有影响吗？e.g.在上面的代码中请求头是在<code>https://zh-hans.ipshu.com/ipv4/13.227.62.117</code>界面按f12查看还是上一个搜索界面按f12查看还是都可以</p><p>Q2：在代码中我用xpath拿到了所有table属性的名为td的后代，但在输出的时候发现，由于原网页在某些字段上加了超链接，在输出时value的text值是一个空格，导致无法输出，而真正要输出的值在td下的<code>&lt;a&gt;</code>标签中,目前的思路是在value遍历host_tr的时候加上一个判断判断下面是否还有<code>&lt;a&gt;</code>标签，但是语法方面不太能够实现</p><p>2023-5-7 A2：检查输出，添加一个判断，如果输出的text值是一个空格，则取当前td元素下的a元素再提取文本，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="built_in">str</span>(value.xpath(<span class="string">&#x27;text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> k == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">a_element = value.xpath(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line">k = <span class="built_in">str</span>(a_element[<span class="number">0</span>].xpath(<span class="string">&#x27;text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure><p>Q3：后续还有text值为空导致整个程序结束的bug，报错原因是<code>IndexError:list index out of range</code></p><p>2023-7-5 A3：在网上查询后暂时的解决方案为使用<code>try——except</code>语句跳过空值，具体如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> host_tr:</span><br><span class="line">            <span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(host_tr):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> value.tag == <span class="string">&#x27;td&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> k != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> v != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                        maps[k] = v</span><br><span class="line">                        v = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    k = <span class="built_in">str</span>(value.xpath(<span class="string">&#x27;text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">                    <span class="built_in">print</span>(k)</span><br><span class="line">                <span class="keyword">else</span>:v += value.text.strip()</span><br><span class="line">                <span class="keyword">if</span> value.tail.strip() != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    v += <span class="string">&#x27; &#x27;</span> + value.tail.strip() + <span class="string">&#x27; &#x27;</span></span><br><span class="line">                    <span class="built_in">print</span>(v)</span><br><span class="line">                <span class="keyword">if</span> index == <span class="built_in">len</span>(host_tr) - <span class="number">1</span>:</span><br><span class="line">                    maps[k] = v</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">except</span> IndexError:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;del&gt;看到什么写什么&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&quot;1、for-index-value-in-enumerate-host-tr&quot;&gt;&lt;a href=&quot;#1、for-index-value-in-enumerate-host-tr&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="python 爬虫" scheme="http://example.com/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://example.com/2023/05/22/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/05/22/git%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-05-21T16:00:00.000Z</published>
    <updated>2023-05-22T05:56:25.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git学习"><a href="#git学习" class="headerlink" title="git学习"></a>git学习</h1><h2 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h2><p>进入新项目的文件夹并初始化项目，只需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="2、创建一个github仓库"><a href="#2、创建一个github仓库" class="headerlink" title="2、创建一个github仓库"></a>2、创建一个github仓库</h2><p>点击页面右上角的+符号，然后选择 “New repository”。给版本库起个名字，然后向下滚动并点击 “Create repository”。</p><h2 id="3、一个文件被git跟踪的阶段"><a href="#3、一个文件被git跟踪的阶段" class="headerlink" title="3、一个文件被git跟踪的阶段"></a>3、一个文件被git跟踪的阶段</h2><h3 id="已经提交的阶段"><a href="#已经提交的阶段" class="headerlink" title="已经提交的阶段"></a>已经提交的阶段</h3><p>一个文件的所有修改都已经被保存在本地的repo中时，该文件就处于提交（commit）状态。这种状态下的文件可以被推送到远程repo上</p><h3 id="已修改状态"><a href="#已修改状态" class="headerlink" title="已修改状态"></a>已修改状态</h3><p>处于暂存（staged)状态的文件意味着可以被提交。在这种状态下，所有必要的修改已经完成，下一步就是把文件移到提交状态</p><p>文件——&gt;暂存——&gt;提交——&gt;推送</p><p>提交是提交到本地，推送才是push到github仓库</p><h2 id="4、如何在git中添加文件"><a href="#4、如何在git中添加文件" class="headerlink" title="4、如何在git中添加文件"></a>4、如何在git中添加文件</h2><p>使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>如果想添加一个特定的文件（e.g. aboutyou.txt)，也可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add aboutyou.txt</span><br></pre></td></tr></table></figure><p>这样的格式</p><p>添加完后文件就处于暂存状态，下一步就是提交</p><h2 id="5、如何提交文件"><a href="#5、如何提交文件" class="headerlink" title="5、如何提交文件"></a>5、如何提交文件</h2><p>使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><p>其中<code>git commit</code>告诉git所有被暂存的文件都已经准备好被提交了，<code>-m &quot;the first commit&quot;</code>是提交信息，<code>m</code>是信息的缩写，<code>the first commit</code>是具体的信息</p><p>现在文件就处于提交状态了</p><h2 id="6、推送仓库到github"><a href="#6、推送仓库到github" class="headerlink" title="6、推送仓库到github"></a>6、推送仓库到github</h2><p>创建完仓库后浏览器会跳转一个页面，告诉你怎么在本地新建一个仓库或者推送现有仓库，跟着一步步把代码运行一遍就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git学习&quot;&gt;&lt;a href=&quot;#git学习&quot; class=&quot;headerlink&quot; title=&quot;git学习&quot;&gt;&lt;/a&gt;git学习&lt;/h1&gt;&lt;h2 id=&quot;1、初始化项目&quot;&gt;&lt;a href=&quot;#1、初始化项目&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>python搭建虚拟环境</title>
    <link href="http://example.com/2023/05/16/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/05/16/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2023-05-15T16:00:00.000Z</published>
    <updated>2023-05-22T08:43:46.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>1、在搭建机器人的时候，按照官网的步骤创建虚拟环境后用pycharm打开项目找不到环境（我就又在pycharm上重新创了一个）</p><p>有空研究下（</p><p>2023-05-22更新：</p><p><strong>默认</strong>下载了pycharm并且安装好了poetry</p><p>先创建一个新的项目文件夹，进入项目文件夹并用pycharm打开，左下角选择<code>终端</code>，输入命令<code>poetry init</code>在已有项目中添加poetry管理，执行完后会发现项目根目录下出现了一个<code>pyproject.toml</code>文件，这就是poetry的配置文件</p><p>添加完poetry管理后，再用poetry添加虚拟环境，查询<a href="%22https://python-poetry.org/docs/configuration/">官方文档</a>可知，通过配置参数可以把虚拟环境安装到项目文件夹下而不是C盘😡,具体代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config virtualenvs.in-project true</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry env use python</span><br></pre></td></tr></table></figure><p>添加完虚拟环境后用<code>poetry env info</code>查看虚拟环境</p><p>创建完虚拟环境后就是为当前项目使用这个环境,在pycharm的右下角选择添加解释器,找到刚刚创建的<code>.venv/Scripts/python.exe</code>并添加,再选择这个环境作为当前项目的解释器</p><p>最后<code>poetry shell</code>启动虚拟环境即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;1、在搭建机器人的时候，按照官网的步骤创建虚拟环境后用pycharm打开项目找不到环境（我就又在pycharm上重新创了一个）&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="poetry" scheme="http://example.com/tags/poetry/"/>
    
    <category term="虚拟环境" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>SDN课程实验</title>
    <link href="http://example.com/2023/05/13/SDN/"/>
    <id>http://example.com/2023/05/13/SDN/</id>
    <published>2023-05-12T16:00:00.000Z</published>
    <updated>2023-05-22T05:13:42.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDN"><a href="#SDN" class="headerlink" title="SDN"></a>SDN</h1><p>[toc]</p><p>———————–2023-5-13</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>历史-&gt;威胁-&gt;发展</p><p>三大主流SDN标准化技术：OpenFlow、Overlay（网络虚拟化叠加）&amp;I2RS（路由系统接口）、NFV</p><p>NFV与SDN的基础都是通用服务器、云计算以及虚拟化技术</p><p>NFV与SDN存在互补性，二者相互独立，没有依赖关系</p><p>OpenFlow改变了网络结构——NetworkOS</p><h2 id="定义和架构"><a href="#定义和架构" class="headerlink" title="定义和架构"></a>定义和架构</h2><p>SDN——软件定义网络</p><p>架构：ONF所定义的典型架构：应用层、控制层、基础设施层</p><p>南向接口：向下与设备交互的接口称为南向接口</p><p>北向接口：控制器向上为SDN APP提供的编程接口（API）就称为北向接口</p><p>​SDN最本质的特征就是允许通过编程的方式控制网络</p><p>东西向接口：定义控制器之间通信的接口</p><p>基本概念——传统网络设备的数控分离</p><p>​  SDN数控分离：SDN主要特征之一</p><p>​  SDN网络可编程：另一个重要属性，主要体现在北向接口</p><h2 id="SDN仿真基础"><a href="#SDN仿真基础" class="headerlink" title="SDN仿真基础"></a>SDN仿真基础</h2><h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><p>通过虚拟化技术将一台计算机虚拟为多台逻辑计算机</p><h3 id="虚拟化架构"><a href="#虚拟化架构" class="headerlink" title="虚拟化架构"></a>虚拟化架构</h3><p>两种虚拟化方案：裸金属型、宿主型</p><h3 id="Mininet软件"><a href="#Mininet软件" class="headerlink" title="Mininet软件"></a>Mininet软件</h3><h3 id="网络构建参数："><a href="#网络构建参数：" class="headerlink" title="网络构建参数："></a>网络构建参数：</h3><p>–topo</p><p>–switch：定义mininet要使用的交换机（默认使用OpenVSwitch交换机，即OVSK）</p><p>–controller：定义要使用的控制器</p><p>–mac：自动设置设备的mac地址</p><h3 id="内部交互命令"><a href="#内部交互命令" class="headerlink" title="内部交互命令"></a>内部交互命令</h3><p>net&#x2F;nodes&#x2F;links&#x2F;pingall</p><p>net:显示链接信息</p><p>nodes：节点信息</p><p>links：链路健壮性信息</p><p>pingall：验证所有主机间通信</p><p>iperf：两节点间进行带宽测试</p><p>iperfudp：同上</p><p>link：禁用或开始节点间链接</p><p>dpctl：所有交换机上增删改查流表</p><h3 id="Mininet可视化"><a href="#Mininet可视化" class="headerlink" title="Mininet可视化"></a>Mininet可视化</h3><p>直接在界面上编辑任意拓扑</p><h3 id="启动miniedit"><a href="#启动miniedit" class="headerlink" title="启动miniedit"></a>启动miniedit</h3><p>进入mininet&#x2F;examples </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./miniedit.py</span><br></pre></td></tr></table></figure><h3 id="Miniedit拓扑建立"><a href="#Miniedit拓扑建立" class="headerlink" title="Miniedit拓扑建立"></a>Miniedit拓扑建立</h3><h3 id="Miniedit属性配置"><a href="#Miniedit属性配置" class="headerlink" title="Miniedit属性配置"></a>Miniedit属性配置</h3><h3 id="Miniedit全局配置"><a href="#Miniedit全局配置" class="headerlink" title="Miniedit全局配置"></a>Miniedit全局配置</h3><p>左上角edit选项</p><h3 id="Miniedit运行"><a href="#Miniedit运行" class="headerlink" title="Miniedit运行"></a>Miniedit运行</h3><p>左下角run</p><h3 id="Miniedit保存脚本"><a href="#Miniedit保存脚本" class="headerlink" title="Miniedit保存脚本"></a>Miniedit保存脚本</h3><p>File-Export Level 2 xxxxxxx（来不及）</p><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><p>chmod -R 777 sdnlab.py</p><p>.&#x2F;sdnlab.py</p><h2 id="SDN平面"><a href="#SDN平面" class="headerlink" title="SDN平面"></a>SDN平面</h2><h3 id="硬件路由器数据平面"><a href="#硬件路由器数据平面" class="headerlink" title="硬件路由器数据平面"></a>硬件路由器数据平面</h3><h4 id="主控板"><a href="#主控板" class="headerlink" title="主控板"></a>主控板</h4><p>组成：CPU，X86通用处理器芯片</p><p>路由器操作系统</p><p>管理员命令行操作平台</p><h4 id="背板"><a href="#背板" class="headerlink" title="背板"></a>背板</h4><p>功能：设备板卡间总线：数据总线，控制总线，管理总线</p><p>集群机柜间总线：设备间互通总线</p><p>总线架构：多级Clos架构（无阻塞、理论无限扩展）</p><h4 id="接口板"><a href="#接口板" class="headerlink" title="接口板"></a>接口板</h4><p>组成：光模块</p><p>中低性能ASIC芯片或FPGA芯片处理器</p><p>功能：实现光电转换</p><p>上报主控板接入状态</p><h4 id="线卡板"><a href="#线卡板" class="headerlink" title="线卡板"></a>线卡板</h4><p>数据平面&#x2F;控制平面最重要的部分</p><p>分上下行两部分板卡</p><h4 id="PULL型交换调度算法"><a href="#PULL型交换调度算法" class="headerlink" title="PULL型交换调度算法"></a>PULL型交换调度算法</h4><h4 id="POP型交换调度算法"><a href="#POP型交换调度算法" class="headerlink" title="POP型交换调度算法"></a>POP型交换调度算法</h4><h3 id="软件路由器数据平面"><a href="#软件路由器数据平面" class="headerlink" title="软件路由器数据平面"></a>软件路由器数据平面</h3><h4 id="Click"><a href="#Click" class="headerlink" title="Click"></a>Click</h4><p>c++编写，基于Linux实现</p><h3 id="SDN数据平面"><a href="#SDN数据平面" class="headerlink" title="SDN数据平面"></a>SDN数据平面</h3><h4 id="OVS简单架构"><a href="#OVS简单架构" class="headerlink" title="OVS简单架构"></a>OVS简单架构</h4><p>用户数据空间和内核</p><p>管理层</p><h4 id="vswitched"><a href="#vswitched" class="headerlink" title="vswitched"></a>vswitched</h4><p>OVS的核心模块</p><p>通过vswitched可以配置一系列特性</p><h4 id="OVS下的快速交换转发通道"><a href="#OVS下的快速交换转发通道" class="headerlink" title="OVS下的快速交换转发通道"></a>OVS下的快速交换转发通道</h4><h4 id="OVS下的慢速交换转发通道"><a href="#OVS下的慢速交换转发通道" class="headerlink" title="OVS下的慢速交换转发通道"></a>OVS下的慢速交换转发通道</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SDN&quot;&gt;&lt;a href=&quot;#SDN&quot; class=&quot;headerlink&quot; title=&quot;SDN&quot;&gt;&lt;/a&gt;SDN&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;———————–2023-5-13&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class</summary>
      
    
    
    
    <category term="SDN" scheme="http://example.com/categories/SDN/"/>
    
    
    <category term="SDN" scheme="http://example.com/tags/SDN/"/>
    
    <category term="课程实验" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>搭建qq机器人(一)</title>
    <link href="http://example.com/2022/12/28/qqbot(1)/"/>
    <id>http://example.com/2022/12/28/qqbot(1)/</id>
    <published>2022-12-27T16:00:00.000Z</published>
    <updated>2022-12-28T10:16:04.450Z</updated>
    
    <content type="html"><![CDATA[<p>看到别人在qq<del>调教</del>自己的机器人有点心动也想自己搭一个</p><p>网上搜到了mirai框架，下面是他们的开发文档</p><p><a href="https://docs.mirai.mamoe.net/">Mirai | mirai (mamoe.net)</a></p><p>官方文档的搭建教程：<a href="https://docs.mirai.mamoe.net/ConsoleTerminal.html">Mirai - Console Terminal | mirai (mamoe.net)</a></p><p>ariadne社区文档的搭建教程：<a href="https://graiax.cn/before/install_mirai.html">Mirai 的安装与配置 | GraiaX 文档</a></p><p>感觉社区文档的更清楚一点，我就跟着社区文档走了</p><p>mirai部分搭建就几个步骤：<br>1.安装java11</p><p>打开cmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install Microsoft.OpenJDK.17</span><br></pre></td></tr></table></figure><p>2.下载解压mcl</p><p>下载地址：<a href="https://github.com/iTXTech/mirai-console-loader/releases/download/v2.1.0/mcl-2.1.0.zip">https://github.com/iTXTech/mirai-console-loader/releases/download/v2.1.0/mcl-2.1.0.zip</a></p><p><del>不会有人不会解压吧</del></p><p>3.安装mah插件并配置mah信息</p><p>进到上一步解压出来的文件夹中先双击mcl.cmd运行，然后shift+右键，然后选择启动Windows powershell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./mcl --update-package net.mamoe:mirai-api-http --channel stable-v2 --type plugin</span><br><span class="line">./mcl -u</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20221228151545140.png" alt="image-20221228151545140"></p><p>这样就是成功了</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20221228152231637.png" alt="image-20221228152231637"></p><p>登录账号试试，不建议按照教程设置自动登录，因为每次登录要验证，会增加风险</p><p>登陆时弹出界面要验证</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20221228152709301.png" alt="image-20221228152709301"></p><p>复制url到浏览器打开，先别急着验证，按f12打开开发者工具，选择网络一栏，再回去验证</p><p>复制得到的ticket到下面一栏按回车</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20221228153912749.png" alt="image-20221228153912749"></p><p>这样就是成功了</p><p>CTRL+C退出服务，接着去配置mah</p><p>配置完出了点问题（暂时不知道寄在哪）先往后做着吧</p><h2 id="插一嘴"><a href="#插一嘴" class="headerlink" title="插一嘴"></a>插一嘴</h2><p>记得安装<code>poetry</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看到别人在qq&lt;del&gt;调教&lt;/del&gt;自己的机器人有点心动也想自己搭一个&lt;/p&gt;
&lt;p&gt;网上搜到了mirai框架，下面是他们的开发文档&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.mirai.mamoe.net/&quot;&gt;Mirai | mirai (mamoe.</summary>
      
    
    
    
    <category term="bot" scheme="http://example.com/categories/bot/"/>
    
    
    <category term="qq" scheme="http://example.com/tags/qq/"/>
    
    <category term="bot" scheme="http://example.com/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>搭建qq机器人(二)</title>
    <link href="http://example.com/2022/12/28/qqbot(2)/"/>
    <id>http://example.com/2022/12/28/qqbot(2)/</id>
    <published>2022-12-27T16:00:00.000Z</published>
    <updated>2022-12-29T04:02:11.511Z</updated>
    
    <content type="html"><![CDATA[<p>跟着教程走，要致富，先撸树！</p><p>忙了一下午终于</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20221228181423079.png" alt="image-20221228181423079"></p><p><del>我的8080端口被占用了</del></p><p>找了半天的bug</p><p><del>虽然没干什么事但是累死了</del></p><p>2022-12-29更新：</p><h1 id="安装saya"><a href="#安装saya" class="headerlink" title="安装saya"></a>安装saya</h1><p>saya可以帮助管理机器人中不同的功能，就像是往里打mod，saya就是mod管理器</p><p>来一点文件头（）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from graia.ariadne.app import Ariadne</span><br><span class="line">from graia.ariadne.event.message import GroupMessage</span><br><span class="line">from graia.ariadne.event.message import FriendMessage</span><br><span class="line">from graia.ariadne.message.chain import MessageChain</span><br><span class="line">from graia.ariadne.model import Group</span><br><span class="line">from graia.ariadne.model import Friend</span><br><span class="line"></span><br><span class="line">from graia.saya import Channel</span><br><span class="line">from graia.saya.builtins.broadcast.schema import ListenerSchema</span><br><span class="line"></span><br><span class="line">channel = Channel.current()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟着教程走，要致富，先撸树！&lt;/p&gt;
&lt;p&gt;忙了一下午终于&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20221228181423079.png&quot; alt=</summary>
      
    
    
    
    <category term="bot" scheme="http://example.com/categories/bot/"/>
    
    
    <category term="qq" scheme="http://example.com/tags/qq/"/>
    
    <category term="bot" scheme="http://example.com/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>搭建blog中遇到的一些小问题汇总</title>
    <link href="http://example.com/2022/12/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/12/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2022-12-24T16:00:00.000Z</published>
    <updated>2022-12-26T04:55:30.876Z</updated>
    
    <content type="html"><![CDATA[<p>22-12-25更新</p><h1 id="副标题设计"><a href="#副标题设计" class="headerlink" title="副标题设计"></a>副标题设计</h1><p>在站点配置文件_config.yml下更改 <code>subtitle</code>,但是在网页上找不到在哪</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">盒盒のbox</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">没有奇迹，没有惊喜</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">盒盒</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><p><del>在网上搜了一下说<code>Mist</code>主题作者把副标题隐藏了，所以换成<code>Muse</code>主题试一下</del><br>没有用又改回来了</p><h1 id="给文章分类及打tag"><a href="#给文章分类及打tag" class="headerlink" title="给文章分类及打tag"></a>给文章分类及打tag</h1><p>在文章的最开头like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 搭建blog中遇到的一些小问题汇总</span><br><span class="line">date: 2022-12-25</span><br><span class="line">categories:</span><br><span class="line">- hexo</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- blog</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>categories</code>后面的就是文章的分类，好像一个文章只能有一个分类，<code>tags</code>后面的就是文章的tag，可以有很多个</p><p>今天就整这么多吧，摆了（</p><p>22-12-26更新</p><h1 id="博文置顶功能"><a href="#博文置顶功能" class="headerlink" title="博文置顶功能"></a>博文置顶功能</h1><p>在需要置顶的文章的Front-matter中加上top: true即可,like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 搭建blog中遇到的一些小问题汇总</span><br><span class="line">date: 2022-12-25</span><br><span class="line">categories:</span><br><span class="line">- hexo</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- blog</span><br><span class="line">top: true</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;22-12-25更新&lt;/p&gt;
&lt;h1 id=&quot;副标题设计&quot;&gt;&lt;a href=&quot;#副标题设计&quot; class=&quot;headerlink&quot; title=&quot;副标题设计&quot;&gt;&lt;/a&gt;副标题设计&lt;/h1&gt;&lt;p&gt;在站点配置文件_config.yml下更改 &lt;code&gt;subtitle&lt;/co</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
</feed>
